class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length - 3; i++) {
            if(i == 0 || nums[i] != nums[i - 1]) {
                for(int j = i + 1; j < nums.length - 2; j++) {
                    if(j == i + 1 || nums[j] != nums[j - 1]) {
                        int twoSum = nums[i] + nums[j];
                        int left = j + 1;
                        int right = nums.length - 1;
                        while(left < right) {
                            if(nums[left] + nums[right] + twoSum == target){
                                res.add(Arrays.asList(nums[i], nums[j],nums[left],nums[right]));
                                while(left < right && nums[left] == nums[left + 1]){
                                    left++;
                                } 
                                while(left < right && nums[right] == nums[right - 1]) {
                                    right--;
                                }
                                left++;
                                right--;
                            }else if(nums[left] + nums[right] + twoSum < target) {
                                left++;
                            }else{
                                right--;
                            }
                        }
                    }
                }
            }
        }
        return res;
        
    }
}



class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        if(nums == null || nums.length < 4) {
            return new ArrayList<>();
        }
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int len = nums.length;
        for(int i = 0; i < len - 3; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int min = nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3];
            if(min > target) {
                continue;
            }
            int max = nums[i] + nums[len - 3] + nums[len - 2] + nums[len - 1];
            if(max < target) {
                continue;
            }
            for(int j = i + 1; j < len - 2; j++) {
                if(j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                min = nums[i] + nums[j] + nums[j + 1] + nums[j + 2];
                if(min > target) {
                    continue;
                }
                max = nums[i] + nums[j] + nums[len - 2] + nums[len - 1];
                if(max < target) {
                    continue;
                }
                int left = j + 1, right = nums.length - 1;
                while(left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if(sum > target) {
                        right--;
                    }else if(sum < target) {
                        left++;
                    }else{
                        res.add(new ArrayList<>(Arrays.asList(nums[i], nums[j],nums[left],nums[right])));
                        while(left < right && nums[left] == nums[left + 1]){
                            left++;
                        }
                        while(left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        left++;
                        right--;
                    }
                }
            }
        }
        return res;
    }
}

// 时间复杂度 O(n)
// 空间复杂度 O(1)
