class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        if(nums == null || nums.length < 3) {
            return list;
        }
        int len = nums.length;
        Arrays.sort(nums);
        for(int i = 0; i < len; i++) {
            if(nums[i] > 0) {
                break;
            }
            if(i > 0 && nums[i - 1] == nums[i]) {
                continue;
            }
            int left = i + 1;
            int right = len - 1;
            while(left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if(sum == 0) {
                    list.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while(left < right && nums[left] == nums[left + 1]){
                        left++;
                    }
                    while(left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }
                    left++;
                    right--;
                }else if(sum < 0) {
                    left++;
                }else{
                    right--;
                }
            }
        }
        return list;

    }
}
// 双指针解法，先对数组进行排序。对数组进行遍历同时设置两个指针left和right，一个开始指向头一个开始指向尾部。
// 终止条件两个指针相遇。若对于index为i，left和right的元素相加为target，则加入list。
// 注意这道题目需要去重具体方法是left和left+1或者right和right-1的值相等时候continue即可。
