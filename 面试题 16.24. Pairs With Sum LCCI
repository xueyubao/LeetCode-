class Solution {
    public List<List<Integer>> pairSums(int[] nums, int target) {
        HashMap<Integer,Integer> map = new HashMap<>();
        List<List<Integer>> ans = new ArrayList<>();
        for(int num : nums) {
            Integer count = map.get(target - num);
            if(count != null) {
                ans.add(Arrays.asList(num, target - num));
                if(count == 1) {
                    map.remove(target - num);
                }else{
                    map.put(target - num, --count);
                }

            }else{
                map.put(num, map.getOrDefault(num, 0) + 1);
            }
        }
        return ans;
    }
}
// 使用hashmap存入数组中的元素。用target-当前元素，如果已经在hashmap中出现，
// 则加入到list中，同时判断相➖的值，如果是1，直接remove，如果不是先count自减
// 然后更新map中target-当前元素的值。
// 时间复杂度O(n) 空间复杂度O(n)
