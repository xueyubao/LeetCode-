class Solution {
    public int singleNumber(int[] nums) {
        int sum = 0;
        for(int num : nums) {
            sum ^= num;
        }
        return sum;
    }
}
// 使用位运算符: 任何数和0做异或运算都是其本身；和自己做异或运算都是0
// 时间复杂度O(n)  空间复杂度O(1)

class Solution {
    public int singleNumber(int[] nums) {
        int res = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        Set<Map.Entry<Integer,Integer>> entrySet = map.entrySet();
        for(Map.Entry<Integer,Integer> me : entrySet) {
            Integer key = me.getKey();
            Integer value = me.getValue();
            if(value == 1) {
                res = key;
            }
        }
        return res;
    }
}
// 用hashmap
// 时间复杂度O(n)  空间复杂度O(n)
