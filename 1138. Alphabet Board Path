class Solution {
    public String alphabetBoardPath(String target) {
        int x = 0, y = 0, nx = 0, ny = 0;
        StringBuilder ans = new StringBuilder("");
        for(int i = 0; i < target.length(); i++) {
            int temp = target.charAt(i) - 'a';
            if(i > 0 && target.charAt(i) == target.charAt(i - 1)){
                ans.append("!");
            }else{
                nx = temp / 5;
                ny = temp % 5;
                if(ny < y) {
                    for(int j = 0; j < y - ny; j++ ) {
                        ans.append("L");
                    }
                }
                if(nx < x) {
                    for(int j = 0; j < x - nx; j++) {
                        ans.append("U");
                    }
                }
                if(nx > x) {
                    for(int j = 0; j < nx - x; j++) {
                        ans.append("D");
                    }
                }
                if(ny > y) {
                    for(int j = 0; j < ny - y; j++) {
                        ans.append("R");
                    }
                }
                ans.append("!");
                x = nx;
                y = ny;
            }
        }
        return ans.toString();

    }
}
// 时间复杂度O(n) 空间复杂度O(n)
