class Solution {
    public int threeSumClosest(int[] nums, int target) {
        if(nums == null || nums.length < 3) return 0;
        Arrays.sort(nums);
        int closetSum = nums[0] + nums[1] + nums[2];
        for(int i = 0; i < nums.length; i++){
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                int sum = nums[i] + nums[left] + nums[right];
                if(Math.abs(sum - target) < Math.abs(closetSum - target)){
                    closetSum = sum;
                }
                if(sum < target){
                    left++;
                }else if(sum > target){
                    right--;
                }else{
                    return sum;
                }
            }
        }
        return closetSum;
    }
}
// 时间复杂度O(N^2) 空间复杂度 O(1)
// 双指针 假设当前的index为i 一个指针设置成i + 1 另一个为nums.length - 1;
// 这三个index上的数相加，三叔与target进行比较
// 这三个index上的数相加，更新closestSum同时与target进行比较。
// 这三个index上的数相加，与target进行比较
