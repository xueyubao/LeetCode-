class Solution {
    private int result = 0;
    private int m;
    private int n;
    public int numIslands(char[][] grid) {
        if(grid.length == 0 || grid[0].length == 0) return 0;
        m = grid.length;
        n = grid[0].length;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '0') continue;
                helper(grid, i, j);
                result++;
            }
        }
        return result;
    }
    private void helper(char[][] grid, int i, int j){
        if(i < 0 || i >= m || j < 0 || j >= n) {
            return;
        }
        if(grid[i][j] == '0') {
            return;
        }
        grid[i][j] = '0';
        helper(grid, i + 1, j);
        helper(grid, i - 1, j);
        helper(grid, i, j + 1);
        helper(grid, i, j - 1);
    }
}
// 时间复杂度 O(N^2) 空间复杂度O(N^2)


