class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int left = 0;
        int right = 0;
        int oddCount = 0;
        int res = 0;
        while(right < nums.length) {
           if((nums[right] & 1) == 1) {
               oddCount++;
           }
           right++;
           if(oddCount == k) {
               int temp = right;
               while(right < nums.length && (nums[right] & 1) == 0) {
                   right++;
               }
               int rightEven = right - temp;
               int leftEven = 0;
               while((nums[left] & 1) == 0) {
                   leftEven++;
                   left++;
               }
               res += (leftEven + 1) *(rightEven + 1);
               left++;
               oddCount--;
           }     
        }
        return res;
    }
}
// 设置滑动窗口，使其包含的奇数正好是k个。同时窗口左右侧的偶数。
// 更新完后将最左边的index加1，oddNumber减一继续向右看是否有这样的窗口
// 时间复杂度O(n) 空间复杂度O(1)

